#!/usr/bin/env bpftrace
/*
 * biostacks - Shows latency of the functions along the network stack.
 *
 */
#include <linux/sched.h>

BEGIN
{
	printf("Tracing latency of network stack funtions. Hit Ctrl-C to end.\n");
    @begin = nsecs;
}

kprobe:net_rx_action
/cpu == 2/
{
	@t[tid] = nsecs;
    @stage[tid] = 1;
}

kprobe:napi_complete_done
/cpu == 2/
{
    if (@t[tid] && @stage[tid] == 1) {
    @q1[comm] = stats((nsecs - @t[tid]));
    }
	@t[tid] = nsecs;
    @stage[tid] = 2;
}

tracepoint:net:netif_receive_skb
/cpu == 2/
{
    if (@t[tid] && @stage[tid] == 2) {
    @q2[comm] = stats((nsecs - @t[tid]));
    }
	@t[tid] = nsecs;
    @stage[tid] = 3;
}

kprobe:ip_rcv
/cpu == 2/
{
    if (@t[tid] && @stage[tid] == 3) {
    @q3[comm] = stats((nsecs - @t[tid]));
    }
	@t[tid] = nsecs;
    @stage[tid] = 4;
}

kprobe:ip_local_deliver
/cpu == 2/
{
    if (@t[tid] && @stage[tid] == 3) {
    @q4[comm] = stats((nsecs - @t[tid]));
    }
	@t[tid] = nsecs;
    @stage[tid] = 5;
}

kprobe:udp_rcv
/cpu == 2/
{
    if (@t[tid] && @stage[tid] == 5) {
    @q5[comm] = stats((nsecs - @t[tid]));
    }
	@t[tid] = nsecs;
    @stage[tid] = 6;
	delete(@t[tid]);
}

tracepoint:sched:sched_wakeup,
tracepoint:sched:sched_wakeup_new
{
    @cs[args->pid] = nsecs;
}

kprobe:finish_task_switch
{
    $prev = (struct task_struct *)arg0;
    if(@t[$prev->pid]) {
        @ts[$prev->pid] = nsecs;
    }

    if (@ts[tid] && @stage[tid]) {
        @us[tid, @stage[tid]] = stats((nsecs - @ts[tid]));
        delete(@ts[tid]);
    }

    if (@cs[tid]) {
        @uc[cpu] = stats((nsecs - @cs[tid]));
        delete(@cs[tid]);
    }
}

END
{
    printf("ran for %d qs \n", (nsecs - @begin)/1000);
    clear(@begin);
    clear(@t);
    clear(@stage);
    clear(@ts);
    clear(@cs)
}



