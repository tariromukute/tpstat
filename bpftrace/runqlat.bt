#!/usr/local/bin/bpftrace

#include <linux/sched.h>

/**
 * It is useful for identifying and quantifying issues of CPU saturation, where there is more demand for CPU resources than they can service. The metric measured by runqlat(8) is the time each thread (task) spends waiting for its turn on CPU.
 */
BEGIN
{
        printf("Tracing CPU scheduler... Hit Ctrl-C to end.\n");
        @begin = nsecs;
}

tracepoint:sched:sched_wakeup,
tracepoint:sched:sched_wakeup_new
{
        @qtime[args->pid] = nsecs;
}

tracepoint:sched:sched_switch
{
        if (args->prev_state == TASK_RUNNING) {
                @qtime[args->prev_pid] = nsecs;
        }

        $ns = @qtime[args->next_pid];
        if ($ns) {
                @usecs = hist((nsecs - $ns) / 1000);
        }
        delete(@qtime[args->next_pid]);
}

END
{
        clear(@qtime);
        printf("Duration %d ms \n", (nsecs - @begin)/1000000);
}
