#!/usr/local/bin/bpftrace

BEGIN
{
        printf("Tracing net device send/receive. Hit Ctrl-C to end.\n");
        @begin = nsecs;
}

/**
 * There are some caveats with this approach: sk_buffs can be segmented into other sk_buffs on GSO, or attached to others on GRO. TCP can also coalesce sk_buffs (tcp_try_coalesce()). This means that, while the lifespan of the sk_buffs can be measured, the lifespan of the full packet may be undercounted. This tool could be enhanced to take these code paths into account: copying an original birth timestamp to new sk_buffs as they are created.
 */
kprobe:kmem_cache_alloc,
kprobe:kmem_cache_alloc_node
{
        $cache = arg0;
        if ($cache == *kaddr("skbuff_fclone_cache") ||
            $cache == *kaddr("skbuff_head_cache")) {
                @is_skb_alloc[tid] = 1;
        }
}

kretprobe:kmem_cache_alloc,
kretprobe:kmem_cache_alloc_node
/@is_skb_alloc[tid]/
{
        delete(@is_skb_alloc[tid]);
        @skb_birth[retval] = nsecs;
}

kprobe:kmem_cache_free
/@skb_birth[arg1]/
{
        @skb_residency_nsecs = hist(nsecs - @skb_birth[arg1]);
        delete(@skb_birth[arg1]);
}

interval:s:1
{
        print(@skb_residency_nsecs);
        clear(@skb_residency_nsecs);  
}

END
{
        clear(@is_skb_alloc);
        clear(@skb_birth);
        printf("Duration %d ms \n", (nsecs - @begin)/1000000);
}