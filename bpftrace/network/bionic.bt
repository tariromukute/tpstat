#!/usr/bin/env bpftrace
/*
 * biostacks - Shows latency of the functions along the network stack.
 *
 */
#include <linux/sched.h>

BEGIN
{
	printf("Tracing latency of network stack funtions. Hit Ctrl-C to end.\n");
    @begin = nsecs;
}

/* The */

kprobe:i40e_clean_rx_irq
/cpu == 2/
{
    @scope[tid] = nsecs;
}

kprobe:i40e_alloc_rx_buffers
/cpu == 2 && @scope[tid]/
{
    @alloc[tid] = nsecs;
}

kretprobe:i40e_alloc_rx_buffers
/cpu == 2 && @scope[tid]/
{
    @talloc = stats((nsecs - @alloc[tid]));
    delete(@alloc[tid]);
}

kprobe:build_skb
/cpu == 2 && @scope[tid]/
{
    @build[tid] = nsecs;
}

kretprobe:build_skb
/cpu == 2 && @scope[tid]/
{
    @tbuild = stats((nsecs - @build[tid]));
    delete(@build[tid]);
}

kprobe:skb_put
/cpu == 2 && @scope[tid]/
{
    @put[tid] = nsecs;
}

kretprobe:skb_put
/cpu == 2 && @scope[tid]/
{
    @tput = stats((nsecs - @put[tid]));
    delete(@put[tid]);
}

kprobe:__napi_alloc_skb
/cpu == 2 && @scope[tid]/
{
    @napialloc[tid] = nsecs;
}

kretprobe:__napi_alloc_skb
/cpu == 2 && @scope[tid]/
{
    @tnapialloc = stats((nsecs - @napialloc[tid]));
    delete(@napialloc[tid]);
}

kprobe:napi_gro_receive
/cpu == 2 && @scope[tid]/
{
    @gro[tid] = nsecs;
}

kretprobe:napi_gro_receive
/cpu == 2 && @scope[tid]/
{
    @tgro = stats((nsecs - @gro[tid]));
    delete(@gro[tid]);
}

kretprobe:i40e_clean_rx_irq
/cpu == 2 && @scope[tid]/
{
    @tscope = stats((nsecs - @scope[tid]));
    @budget = hist(retval);
    delete(@scope[tid]);
}

END
{
    printf("ran for %d qs \n", (nsecs - @begin)/1000);
    clear(@begin);
    clear(@scope);
    clear(@alloc);
    clear(@talloc);
    clear(@put);
    clear(@tput);
    clear(@napialloc);
    clear(@tnapialloc);
    clear(@gro);
    clear(@tgro);
    clear(@tbuild);
    clear(@build);
    clear(@budget);
}