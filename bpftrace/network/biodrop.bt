#!/usr/bin/env bpftrace
/*
 * biostacks - Shows latency of the functions along the network stack.
 *
 */
#include <linux/sched.h>
#include <linux/netdevice.h>
#include <linux/percpu-defs.h>
#include <linux/percpu.h>
#include <asm/local.h>

BEGIN
{
    printf("Tracing latency of network stack funtions. Hit Ctrl-C to end.\n");
    @begin = nsecs;
}

kretprobe:ip_local_deliver 
{ 
    @iplocal[(int32)retval] = count(); 
} 

/* returns:
 *  -1: error
 *   0: success
 *  >0: "udp encap" protocol resubmission
 *
 * Note that in the success and error cases, the skb is assumed to
 * have either been requeued or freed.
 */
kretprobe:udp_queue_rcv_one_skb 
{
    @udpqueue[(int32)retval] = count(); 
}

kretprobe:ip_rcv
{
     @iprcv[retval] = count();
}

/*
 *	Return values (usually ignored):
 *	NET_RX_SUCCESS (0): no congestion
 *	NET_RX_DROP (1): packet was dropped
 */
tracepoint:net:netif_receive_skb_exit
{
    @rcvskb[args->ret] = count();
}

/*
 *	NET_RX_SUCCESS (0)	(no congestion)
 *	NET_RX_DROP (1)     (packet was dropped)
 */
tracepoint:net:netif_rx_exit
{
    @netif[args->ret] = count();
}

kretprobe:ip_rcv_finish
{
    @iprcvfinish[retval] = count();
}

/*
 * GRO_MERGED (0),
 * GRO_MERGED_FREE (1),
 * GRO_HELD (2),
 * GRO_NORMAL (3),
 * GRO_DROP (4),
 * GRO_CONSUMED (5),
 */
tracepoint:net:napi_gro_receive_exit
{
    @gro[args->ret] = count();
}

/*
 * recvfrom is passed an output buffer. The return value of recvfrom tells you how many bytes were filled in.
 */
tracepoint:syscalls:sys_exit_recvfrom
{
    @recvfrom[args->ret] = count();
}

interval:s:60
{ 
    print(@iplocal); clear(@iplocal);
    print(@udpqueue); clear(@udpqueue);
    print(@rcvskb); clear(@rcvskb); 
    print(@gro); clear(@gro);
    print(@netif); clear(@netif);
    print(@iprcv); clear(@iprcv);
    print(@iprcvfinish); clear(@iprcvfinish);
    print(@recvfrom); clear(@recvfrom);
    printf("End %d ms -----------\n", (nsecs - @begin)/1000000));
}

END
{
    printf("ran for %d qs \n", (nsecs - @begin)/1000);
}