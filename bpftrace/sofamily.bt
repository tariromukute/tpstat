#!/usr/local/bin/bpftrace

#include <linux/socket.h>

/**
 * sofamily(8)10 traces new socket connections via the accept(2) and connect(2) system calls and summarizes the process * name and  address family. This is useful for workload characterization: * * quantifying the load applied and looking * for any unexpected *socket usage that needs further investigation.
 */
 
BEGIN
{
        printf("Tracing socket connect/accepts. Ctrl-C to end.\n");
        // from linux/socket.h:
        @fam2str[AF_UNSPEC] = "AF_UNSPEC";
        @fam2str[AF_UNIX] = "AF_UNIX";
        @fam2str[AF_INET] = "AF_INET";
        @fam2str[AF_INET6] = "AF_INET6";
        @begin = nsecs;
}

tracepoint:syscalls:sys_enter_connect
{
        @connect[comm, args->uservaddr->sa_family,
            @fam2str[args->uservaddr->sa_family]] = count();
}

tracepoint:syscalls:sys_enter_accept,
tracepoint:syscalls:sys_enter_accept4
{
        @sockaddr[tid] = args->upeer_sockaddr;
}

tracepoint:syscalls:sys_exit_accept,
tracepoint:syscalls:sys_exit_accept4
/@sockaddr[tid]/
{
        if (args->ret > 0) {
                $sa = (struct sockaddr *)@sockaddr[tid];
                @accept[comm, $sa->sa_family, @fam2str[$sa->sa_family]] =
                    count();
        }
        delete(@sockaddr[tid]);
}

END
{
        clear(@sockaddr); clear(@fam2str);
        printf("Duration %d ms \n", (nsecs - @begin)/1000000);
}